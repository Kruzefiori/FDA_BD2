// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // binaryTargets   = ["debian-openssl-3.0.x", "rhel-openssl-3.0.x"]  // Adicione a plataforma correta
}

generator erd {
  provider     = "prisma-erd-generator"
  output       = "./erd.pdf"
  theme        = "forest"
  disableEmoji = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(USER)
}

model Drug {
  name              String
  strength          String
  dosageForm        String
  route             String
  companyName       String
  company           Company                    @relation(fields: [companyName], references: [name], onDelete: Cascade)
  adverseReactions  RelAdverseReactionXDrug[]
  reportDrug        RelReportXDrug[]
  shortages         Shortages[]
  activeIngredients RelActiveIngredientXDrug[]

  @@id([name, strength])
}

model Shortages {
  id                 Int      @id @default(autoincrement())
  drugName           String
  drugStrength       String
  dosageForm         String
  description        String?
  initialPostingDate DateTime
  presentation       String
  Drug               Drug     @relation(fields: [drugName, drugStrength], references: [name, strength], onDelete: Cascade)
}

model Company {
  name      String @id
  drugCount Int    @default(0)
  drugs     Drug[]
}

model AdverseReaction {
  name        String                      @id
  drugs       RelAdverseReactionXDrug[]
  reportDrugs RelAdverseReactionXReport[]
}

model Report {
  id               Int                         @id @default(autoincrement())
  occurCountry     String
  transmissionDate DateTime
  patientAge       Int?
  patientGender    String?
  patientWeight    Int?
  drugs            RelReportXDrug[]
  adverseReactions RelAdverseReactionXReport[]
}

model ActiveIngredient {
  name     String
  strength String
  drugs    RelActiveIngredientXDrug[]

  @@id([name, strength])
}

model RelActiveIngredientXDrug {
  id                       Int              @id @default(autoincrement())
  activeIngredientName     String
  activeIngredientStrength String
  drugName                 String
  drugStrength             String
  ActiveIngredient         ActiveIngredient @relation(fields: [activeIngredientName, activeIngredientStrength], references: [name, strength], onDelete: Cascade)
  Drug                     Drug             @relation(fields: [drugName, drugStrength], references: [name, strength], onDelete: Cascade)
}

model RelAdverseReactionXDrug {
  id              Int             @id @default(autoincrement())
  drugName        String
  drugStrength    String
  adverseReaction String
  Drug            Drug            @relation(fields: [drugName, drugStrength], references: [name, strength], onDelete: Cascade)
  AdverseReaction AdverseReaction @relation(fields: [adverseReaction], references: [name], onDelete: Cascade)
}

model RelAdverseReactionXReport {
  id              Int             @id @default(autoincrement())
  reportId        Int
  adverseReaction String
  Report          Report          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  AdverseReaction AdverseReaction @relation(fields: [adverseReaction], references: [name], onDelete: Cascade)
}

model RelReportXDrug {
  id           Int    @id @default(autoincrement())
  reportId     Int
  drugName     String
  drugStrength String
  Report       Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  Drug         Drug   @relation(fields: [drugName, drugStrength], references: [name, strength], onDelete: Cascade)
}