generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url = "postgresql://unifei:unifei@db:5432/FDA_database"
  // url      = "postgresql://unifei:unifei@56.125.32.98:5433/FDA_database"
}

enum Role {
  USER
  ADMIN
}

model User {
  id            Int     @id @default(autoincrement())
  name          String
  email         String  @unique
  password      String
  role          Role    @default(USER)
}

// Uma shortage é uma falta de um medicamento no mercado.
model Shortages {
  id                 Int      @id @default(autoincrement())
  drugId             Int
  dosageForm         String
  initialPostingDate DateTime
  presentation       String
  Drug               Drug     @relation(fields: [drugId], references: [id], onDelete: Cascade)
}

model Company {
  name      String @id
  drugCount Int    @default(0)
  Drugs     Drug[]
}

model AdverseReaction {
  name        String                      @id
  reportDrugs RelAdverseReactionXReport[]
}

// O report e um relato de um evento adverso associado a um medicamento. Cada relatório pode conter informações sobre o país de ocorrência, data de transmissão, idade do paciente, sexo do paciente e peso do paciente. Além disso, cada relatório pode estar associado a vários medicamentos e reações adversas.
model Report {
  id               Int                         @id @default(autoincrement())
  occurCountry     String
  transmissionDate DateTime
  patientAge       Int?
  patientGender    String?
  patientWeight    Int?
  drugs            RelReportXDrug[]
  adverseReactions RelAdverseReactionXReport[]

  @@index([patientWeight], map: "Report_weight")
}

model ActiveIngredient {
  name     String
  strength String
  Product  Product[]

  @@id([name, strength])
}

// Um produto é um medicamento que contém um ou mais ingredientes ativos, cada um com uma força específica. O produto também tem uma forma de dosagem e uma via de administração.
model Product {
  id                       Int              @id @default(autoincrement())
  activeIngredientName     String
  activeIngredientStrength String
  dosageForm               String
  route                    String
  drugId                   Int
  ActiveIngredient         ActiveIngredient @relation(fields: [activeIngredientName, activeIngredientStrength], references: [name, strength], onDelete: Cascade)
  Drug                     Drug             @relation(fields: [drugId], references: [id], onDelete: Cascade)
}

// Responde a pergunta: "Quais reações adversas estão associadas a um determinado relatório?"
model RelAdverseReactionXReport {
  id              Int             @id @default(autoincrement())
  reportId        Int
  adverseReaction String
  Report          Report          @relation(fields: [reportId], references: [id], onDelete: Cascade)
  AdverseReaction AdverseReaction @relation(fields: [adverseReaction], references: [name], onDelete: Cascade)

  @@index([reportId, adverseReaction], map: "RelAdverseReactionXReport_reportId")
}

// Responde a pergunta: "Quais medicamentos estão associados a um determinado relatório?"
model RelReportXDrug {
  id       Int    @id @default(autoincrement())
  reportId Int
  drugId   Int
  Report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  Drug     Drug   @relation(fields: [drugId], references: [id], onDelete: Cascade)

  @@unique([reportId, drugId], map: "RelReportXDrug_reportid")
}

// A drug e o medicamento em si. A diferença entre a drug e o product e que a drug e o medicamento em si, 
// enquanto o product e o produto que contém um ou mais ingredientes ativos, cada um com uma força específica.
// O produto também tem uma forma de dosagem e uma via de administração. 
// A drug pode ter vários produtos associados a ela, mas cada produto só pode estar associado a uma drug.
// Um exemplo disso e a dipirona, que pode ser tomada em gotas, comprimidos, etc.
model Drug {
  id                       Int                       @id @default(autoincrement())
  companyName              String
  drugName                 String
  Company                  Company                   @relation(fields: [companyName], references: [name], onDelete: Cascade)
  Shortages                Shortages[]
  RelActiveIngredientXDrug Product[]
  RelReportXDrug           RelReportXDrug[]
}
